<wizard>
	<step id="start" nextstep="introduction">
		<text value="Welcome.\n\nThis start wizard will guide you through the basic setup of your receiver.\nPress the OK button on your remote control to move to the next step."/>
		<displaytext value="Welcome.\n\nThis start wizard will guide you through the basic setup of your %s %s.\nPress the OK button on your remote control to move to the next step."/>
		<code>
self.clearSelectedKeys()
self.selectKey("OK")
</code>
	</step>
	<step id="introduction">
		<text value="Use the up/down keys on your remote control to select an option. After that, press OK."/>
		<displaytext value="Use the up/down keys on your remote control to select an option. After that, press OK."/>
		<list>
			<listentry caption="Use the wizard to set up basic features" step="network"/>
			<listentry caption="Exit the wizard" step="end"/>
		</list>
		<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
</code>
	</step>
	<step id="network">
		<text value="Please connect your receiver to the internet"/>
		<displaytext value="Please connect your receiver to the internet"/>
		<list>
			<listentry caption="Check the internet connection" step="update"/>
			<listentry caption="Skip internet connection check (disables automatic package installation)" step="timezone"/>
		</list>
		<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
</code>
	</step>
	<step id="update">
		<text value="Checking the internet connection"/>
		<displaytext value="Checking the internet connection"/>
		<config screen="InstallWizard" module="InstallWizard" args="0" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("OK")
</code>
	</step>
	<step id="networkfailed">
		<condition>
self.condition = not config.misc.installwizard.opkgloaded.value
</condition>
		<text value="Your receiver does not have an internet connection"/>
		<displaytext value="Your receiver is not connected to the internet"/>
		<list>
			<listentry caption="Check the internet connection again" step="update"/>
			<listentry caption="Skip internet connection check (disables automatic package installation)" step="timezone"/>
		</list>
		<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
</code>
	</step>
	<step id="timezone">
		<text value="Please set your time zone"/>
		<displaytext value="Please set your time zone"/>
		<config screen="Setup" module="Setup" args="'timezone'" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nima">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty
</condition>
		<text value="Please set up tuner A"/>
		<displaytext value="Please set up tuner A"/>
		<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimb">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty and not nimmanager.nim_slots[1].isFBCLink()
</condition>
		<text value="Please set up tuner B"/>
		<displaytext value="Please set up tuner B"/>
		<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimc">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and not nimmanager.nim_slots[2].isFBCLink()
</condition>
		<text value="Please set up tuner C"/>
		<displaytext value="Please set up tuner C"/>
		<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimd">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and not nimmanager.nim_slots[3].isFBCLink()
</condition>
		<text value="Please set up tuner D"/>
		<displaytext value="Please set up tuner D"/>
		<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nime">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 4 and not nimmanager.nim_slots[4].empty and not nimmanager.nim_slots[4].isFBCLink()
</condition>
		<text value="Please set up tuner E"/>
		<displaytext value="Please set up tuner E"/>
		<config screen="NimSetup" module="Satconfig" args="4" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimf">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 5 and not nimmanager.nim_slots[5].empty and not nimmanager.nim_slots[5].isFBCLink()
</condition>
		<text value="Please set up tuner F"/>
		<displaytext value="Please set up tuner F"/>
		<config screen="NimSetup" module="Satconfig" args="5" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimg">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 6 and not nimmanager.nim_slots[6].empty and not nimmanager.nim_slots[6].isFBCLink()
</condition>
		<text value="Please set up tuner G"/>
		<displaytext value="Please set up tuner G"/>
		<config screen="NimSetup" module="Satconfig" args="6" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimh">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 7 and not nimmanager.nim_slots[7].empty and not nimmanager.nim_slots[7].isFBCLink()
</condition>
		<text value="Please set up tuner H"/>
		<displaytext value="Please set up tuner H"/>
		<config screen="NimSetup" module="Satconfig" args="7" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimi">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 8 and not nimmanager.nim_slots[8].empty and not nimmanager.nim_slots[8].isFBCLink()
</condition>
		<text value="Please set up tuner I"/>
		<displaytext value="Please set up tuner I"/>
		<config screen="NimSetup" module="Satconfig" args="8" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimj">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 9 and not nimmanager.nim_slots[9].empty and not nimmanager.nim_slots[9].isFBCLink()
</condition>
		<text value="Please set up tuner J"/>
		<displaytext value="Please set up tuner J"/>
		<config screen="NimSetup" module="Satconfig" args="9" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimk">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 10 and not nimmanager.nim_slots[10].empty and not nimmanager.nim_slots[10].isFBCLink()
</condition>
		<text value="Please set up tuner K"/>
		<displaytext value="Please set up tuner K"/>
		<config screen="NimSetup" module="Satconfig" args="10" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimq">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 16 and not nimmanager.nim_slots[16].empty
</condition>
		<text value="Please set up tuner Q"/>
		<displaytext value="Please set up tuner Q"/>
		<config screen="NimSetup" module="Satconfig" args="16" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="nimr">
		<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 17 and not nimmanager.nim_slots[17].empty
</condition>
		<text value="Please set up tuner R"/>
		<displaytext value="Please set up tuner R"/>
		<config screen="NimSetup" module="Satconfig" args="17" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
</code>
	</step>
	<step id="setup">
		<text value="Please setup the following basic configs!"/>
		<config screen="Setup" module="Setup" args="wizardsetup" type="ConfigList"/>
		<code>
self.clearSelectedKeys()
self.selectKey("OK")
</code>
	</step>
	<step id="end" laststep="true">
		<text value="Thank you for using the wizard. Your receiver is now ready for use.\nPress OK to start using your receiver."/>
		<displaytext value="Thank you for using the wizard. Your %s %s is now ready to use.\nPlease press OK to start using your"/>
		<code>
self.clearSelectedKeys()
self.selectKey("OK")
</code>
	</step>
</wizard>
